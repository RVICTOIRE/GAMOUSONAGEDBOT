#!/usr/bin/env python3
"""
Script de test pour v√©rifier la fonctionnalit√© photo
"""

import sqlite3
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv('config.env')

def test_database_structure():
    """Teste la structure de la base de donn√©es"""
    db_file = "signalements.db"
    
    if not os.path.exists(db_file):
        print(f"‚ùå Base de donn√©es {db_file} n'existe pas")
        return False
    
    try:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        # V√©rifier la structure de la table
        cursor.execute("PRAGMA table_info(signalements)")
        columns = [column[1] for column in cursor.fetchall()]
        
        print("üìã Structure de la table signalements :")
        for column in cursor.fetchall():
            print(f"  - {column[1]} ({column[2]})")
        
        # V√©rifier si photo_id existe
        if "photo_id" in columns:
            print("‚úÖ Colonne photo_id pr√©sente")
        else:
            print("‚ùå Colonne photo_id manquante")
            return False
        
        # Compter les signalements
        cursor.execute("SELECT COUNT(*) FROM signalements")
        count = cursor.fetchone()[0]
        print(f"üìä Nombre de signalements : {count}")
        
        # V√©rifier les signalements avec photos
        cursor.execute("SELECT COUNT(*) FROM signalements WHERE photo_id IS NOT NULL")
        photo_count = cursor.fetchone()[0]
        print(f"üì∏ Signalements avec photos : {photo_count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test : {e}")
        return False

def test_api_endpoints():
    """Teste les endpoints de l'API"""
    print("\nüåê Test des endpoints API :")
    
    # Simuler une requ√™te GET
    try:
        import requests
        response = requests.get("http://127.0.0.1:5000/signalements.json", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ GET /signalements.json : {len(data)} signalements")
            
            # V√©rifier la structure des donn√©es
            if data and "Photo" in data[0]:
                print("‚úÖ Champ Photo pr√©sent dans les donn√©es")
            else:
                print("‚ö†Ô∏è Champ Photo manquant dans les donn√©es")
        else:
            print(f"‚ùå GET /signalements.json : {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur API : {e}")

if __name__ == "__main__":
    print("üß™ Test de la fonctionnalit√© photo...")
    
    # Test de la base de donn√©es
    if test_database_structure():
        print("‚úÖ Tests de base de donn√©es r√©ussis")
    else:
        print("‚ùå Tests de base de donn√©es √©chou√©s")
    
    # Test des endpoints API
    test_api_endpoints()
    
    print("\nüéØ R√©sum√© :")
    print("- V√©rifiez que la colonne photo_id existe")
    print("- Testez le bot avec /start")
    print("- V√©rifiez les notifications dans le groupe") 