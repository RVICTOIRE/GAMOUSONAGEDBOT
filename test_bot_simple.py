#!/usr/bin/env python3
"""
Script de test simple pour v√©rifier le bot
"""

import sqlite3
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv('config.env')

def test_bot_configuration():
    """Teste la configuration du bot"""
    print("üîß Test de configuration du bot...")
    
    # V√©rifier les variables d'environnement
    bot_token = os.getenv('BOT_TOKEN')
    group_chat_id = os.getenv('GROUP_CHAT_ID')
    
    if bot_token:
        print("‚úÖ BOT_TOKEN configur√©")
    else:
        print("‚ùå BOT_TOKEN manquant")
        return False
    
    if group_chat_id:
        print(f"‚úÖ GROUP_CHAT_ID configur√©: {group_chat_id}")
    else:
        print("‚ö†Ô∏è GROUP_CHAT_ID non configur√© (notifications d√©sactiv√©es)")
    
    return True

def test_database():
    """Teste la base de donn√©es"""
    print("\nüóÑÔ∏è Test de la base de donn√©es...")
    
    db_file = "signalements.db"
    
    if not os.path.exists(db_file):
        print(f"‚ö†Ô∏è Base de donn√©es {db_file} n'existe pas encore")
        return True
    
    try:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        # V√©rifier la structure
        cursor.execute("PRAGMA table_info(signalements)")
        columns = [column[1] for column in cursor.fetchall()]
        
        required_columns = ["id", "date_heure", "utilisateur", "type", "message", "photo_id", "latitude", "longitude"]
        
        for col in required_columns:
            if col in columns:
                print(f"‚úÖ Colonne {col} pr√©sente")
            else:
                print(f"‚ùå Colonne {col} manquante")
                return False
        
        # Compter les signalements
        cursor.execute("SELECT COUNT(*) FROM signalements")
        count = cursor.fetchone()[0]
        print(f"üìä Signalements en base: {count}")
        
        # Signalements avec photos
        cursor.execute("SELECT COUNT(*) FROM signalements WHERE photo_id IS NOT NULL")
        photo_count = cursor.fetchone()[0]
        print(f"üì∏ Signalements avec photos: {photo_count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur base de donn√©es: {e}")
        return False

def test_imports():
    """Teste les imports n√©cessaires"""
    print("\nüì¶ Test des imports...")
    
    try:
        import telegram
        print("‚úÖ python-telegram-bot install√©")
    except ImportError:
        print("‚ùå python-telegram-bot manquant")
        return False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv install√©")
    except ImportError:
        print("‚ùå python-dotenv manquant")
        return False
    
    return True

def main():
    """Fonction principale de test"""
    print("üß™ Test du bot SONAGED optimis√©...\n")
    
    # Test des imports
    if not test_imports():
        print("\n‚ùå Probl√®me avec les d√©pendances")
        return
    
    # Test de la configuration
    if not test_bot_configuration():
        print("\n‚ùå Probl√®me de configuration")
        return
    
    # Test de la base de donn√©es
    if not test_database():
        print("\n‚ùå Probl√®me avec la base de donn√©es")
        return
    
    print("\n‚úÖ Tous les tests sont pass√©s !")
    print("\nüéØ Le bot est pr√™t √† √™tre utilis√© :")
    print("- /start pour commencer un signalement")
    print("- /photo pour ajouter une photo")
    print("- /groupinfo pour voir les infos du groupe")

if __name__ == "__main__":
    main() 